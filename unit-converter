<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Unit Converter</title>
  <link rel="stylesheet" href="style.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@40,400,0,0&icon_names=swap_horiz" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, Helvetica, sans-serif;
      font-size: 16px;
      line-height: 1.2;
    }

    body {
      background: #f8f9fa;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      text-align: center;
    }

    .converter-container {
      background: white;
      border-radius: 4px;
      padding: 40px;
      box-shadow: 0px 2px 12px rgba(0, 0, 0, 0.1);
      max-width: 700px;
      width: 100%;
      border: 1px solid #e1e5e9;
      padding: 2rem;
    }

    h1 {
      text-align: center;
      color: #333;
      margin-bottom: 30px;
      font-size: 44px;
      font-weight: 300;
    }

    .converter-type {
      margin-bottom: 30px;
    }

    .type-selector {
      padding: 8px 12px;
      background: white; 
      cursor: pointer;
      min-width: 250px;
      color: #555555;
    }

    select, .input-field {
      border: 1px solid #dadce0;      
      transition: all 0.3s ease;
      text-align: center;
      border-radius: 4px;
    }

    .type-selector:focus {
      outline: none;
      border-color: #667eea;
    }

    .input-field, .unit-selector {
      width: 100%;
      padding: 5px 10px;
    }
    
    .conversion-row {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 1.5rem;
    }

    .input-group {
      width: 45%;
    }

    .input-field {
      font-size: 1.8rem;
      background: white;
      margin-bottom: -1px;
      border-radius: 4px 4px 0 0;
      padding: .5rem;
    }

    .input-field:focus {
      outline: none;
    }
    .input-field::-webkit-outer-spin-button, .input-field::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    .unit-selector {
      background-color: #f8f9fa;
      cursor: pointer;
      border-radius: 0 0 4px 4px;
      font-size: 15px;
      color: #555555;
    }

    .unit-selector:focus {
      outline: none;
    }

    .type-selector, .unit-selector {
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      background-image: url('data:image/svg+xml;utf8,<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 9L12 15L18 9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="%23545454"/></svg>');
      background-repeat: no-repeat;
      background-position: right 10px center;
      background-size: 18px;
      color: #555;
    }

    .equals-sign {
      font-size: 2rem;
      color: #70757a;
    }

    .swap-button {
      background: none;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 32px;
      color: #61656b;
      font-variation-settings: "FILL" 0, "wght" 400, "GRAD" 0, "opsz" 48;
    }

    .swap-button:hover {
      transform: rotate(180deg);
    }

    button {
      color: white;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
    }

    .swap-button {
      background: none;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 32px;
      color: #61656b;
      font-variation-settings: "FILL" 0, "wght" 400, "GRAD" 0, "opsz" 48;
    }

    .swap-button:hover {
      transform: rotate(180deg);
    }

    @media (max-width: 480px) {
      .conversion-row {
        flex-direction: column;
      }

      .equals-sign {
        transform: rotate(90deg);
        margin: 10px 0;
      }

      .converter-container {
        padding: 20px;
      }
    }
  </style>
</head>

<body>
  <div class="converter-container">
    <h1>Unit Converter</h1>

    <div class="converter-type">
      <select id="converterType" class="type-selector">
        <option value="volume">Volume</option>
        <option value="length">Length</option>
      </select>
    </div>

    <div class="conversion-row">
      <div class="input-group">
        <input type="number" id="input1" class="input-field" placeholder="Enter value" value="16">
        <select id="unit1" class="unit-selector">
          <!-- Options will be populated by JavaScript -->
        </select>
      </div>

      <button class="swap-button material-symbols-outlined" id="swapBtn" title="Swap units">swap_horiz</button>

      <div class="input-group">
        <input type="number" id="input2" class="input-field" placeholder="Result" value="1">
        <select id="unit2" class="unit-selector">
          <!-- Options will be populated by JavaScript -->
        </select>
      </div>
    </div>
  </div>

  <script>
    // Unit definitions
    const unitDefinitions = {
      volume: {
        units: [
          { value: 'fl_oz', label: 'Fluid ounce' },
          { value: 'cup', label: 'Cup' },
          { value: 'pint', label: 'Pint' },
          { value: 'quart', label: 'Quart' },
          { value: 'gallon', label: 'Gallon' },
          { value: 'tablespoon', label: 'Tablespoon' },
          { value: 'teaspoon', label: 'Teaspoon' },
          { value: 'ml', label: 'Milliliter' },
          { value: 'l', label: 'Liter' }
        ],
        defaultFromUnit: 'tablespoon',
        defaultToUnit: 'cup',
        defaultFromValue: '16',
        defaultToValue: '1'
      },
      length: {
        units: [
          { value: 'inch', label: 'Inch' },
          { value: 'foot', label: 'Foot' },
          { value: 'yard', label: 'Yard' },
          { value: 'mile', label: 'Mile' },
          { value: 'mm', label: 'Millimeter' },
          { value: 'cm', label: 'Centimeter' },
          { value: 'm', label: 'Meter' },
          { value: 'km', label: 'Kilometer' }
        ],
        defaultFromUnit: 'cm',
        defaultToUnit: 'inch',
        defaultFromValue: '15',
        defaultToValue: '5.90551'
      }
    };

    // Efficient direct conversion using computed conversion factors
    function getConversionFactor(type, fromUnit, toUnit) {
      if (fromUnit === toUnit) return 1;
      
      // Base conversion factors to ml/mm
      const baseFactors = {
        volume: {
          'fl_oz': 29.5735,
          'cup': 236.588,
          'pint': 473.176,
          'quart': 946.353,
          'gallon': 3785.41,
          'tablespoon': 14.7868,
          'teaspoon': 4.92892,
          'ml': 1,
          'l': 1000
        },
        length: {
          'inch': 25.4,
          'foot': 304.8,
          'yard': 914.4,
          'mile': 1609344,
          'mm': 1,
          'cm': 10,
          'm': 1000,
          'km': 1000000
        }
      };
      
      // Calculate direct conversion factor
      const fromFactor = baseFactors[type][fromUnit];
      const toFactor = baseFactors[type][toUnit];
      
      return fromFactor / toFactor;
    }

    // DOM elements
    const converterType = document.getElementById('converterType');
    const input1 = document.getElementById('input1');
    const input2 = document.getElementById('input2');
    const unit1 = document.getElementById('unit1');
    const unit2 = document.getElementById('unit2');
    const swapBtn = document.getElementById('swapBtn');

    let isConverting = false;
    let currentType = 'volume';

    // Populate unit options
    function populateUnits(type) {
      const units = unitDefinitions[type].units;
      const defaultFrom = unitDefinitions[type].defaultFromUnit;
      const defaultTo = unitDefinitions[type].defaultToUnit;

      // Clear existing options
      unit1.innerHTML = '';
      unit2.innerHTML = '';

      // Add options to both selectors
      units.forEach(unit => {
        const option1 = document.createElement('option');
        option1.value = unit.value;
        option1.textContent = unit.label;
        if (unit.value === defaultFrom) option1.selected = true;
        unit1.appendChild(option1);

        const option2 = document.createElement('option');
        option2.value = unit.value;
        option2.textContent = unit.label;
        if (unit.value === defaultTo) option2.selected = true;
        unit2.appendChild(option2);
      });
    }

    // Convert between units using direct conversion
    function convert(sourceInput, targetInput, sourceUnit, targetUnit) {
      if (isConverting) return;
      isConverting = true;

      const sourceValue = parseFloat(sourceInput.value);

      if (isNaN(sourceValue) || sourceValue === '') {
        targetInput.value = '';
        isConverting = false;
        return;
      }

      const sourceUnitValue = sourceUnit.value;
      const targetUnitValue = targetUnit.value;

      // Direct conversion - single calculation for maximum accuracy
      const conversionFactor = getConversionFactor(currentType, sourceUnitValue, targetUnitValue);
      const targetValue = sourceValue * conversionFactor;

      // Format the result with appropriate precision
      const formatted = formatNumber(targetValue);
      targetInput.value = formatted;

      isConverting = false;
    }

    // Format number with appropriate precision
    function formatNumber(num) {
      if (num === 0) return '0';
      
      const absNum = Math.abs(num);
      let precision;
      
      if (absNum >= 100) {
        precision = 3;
      } else if (absNum >= 10) {
        precision = 4;
      } else {
        precision = 5;
      }
      
      // Round and remove trailing zeros
      const rounded = parseFloat(num.toFixed(precision));
      return rounded.toString();
    }

    // Handle converter type change
    converterType.addEventListener('change', (e) => {
      const type = e.target.value;
      const definition = unitDefinitions[type];
      
      currentType = type;

      // Populate units
      populateUnits(type);

      // Set default values
      input1.value = definition.defaultFromValue;
      input2.value = definition.defaultToValue;

      // Trigger conversion
      convert(input1, input2, unit1, unit2);
    });

    // Event listeners for input changes
    input1.addEventListener('input', () => {
      convert(input1, input2, unit1, unit2);
    });

    input2.addEventListener('input', () => {
      convert(input2, input1, unit2, unit1);
    });

    // Event listeners for unit changes
    unit1.addEventListener('change', () => {
      if (input1.value) {
        convert(input1, input2, unit1, unit2);
      }
    });

    unit2.addEventListener('change', () => {
      if (input1.value) {
        convert(input1, input2, unit1, unit2);
      }
    });

    // Swap button functionality
    swapBtn.addEventListener('click', () => {
      // Swap values
      const tempValue = input1.value;
      input1.value = input2.value;
      input2.value = tempValue;

      // Swap units
      const tempUnit = unit1.value;
      unit1.value = unit2.value;
      unit2.value = tempUnit;

      // Trigger conversion if there's a value
      if (input1.value) {
        convert(input1, input2, unit1, unit2);
      }
    });

    // Initialize
    populateUnits('volume');
    convert(input1, input2, unit1, unit2);
  </script>
</body>

</html>
